name: DR Template Run

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: us-east-1
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

    - name: Configure other AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: arn:aws:iam::724421275000:role/DREKSRole
        role-session-name: MySessionName   

#   Terraform plan and Terraform apply of cluster creation     
    # - name: Set up Terraform
    #   uses: hashicorp/setup-terraform@v1
    #   with:
    #     terraform_version: 1.0.0
    #     #cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # - name: Terraform Init
    #   run: terraform init

    # - name: Terraform Plan
    #   run: terraform plan -out=tfplan

    # - name: Terraform Apply
    #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    #   run: terraform apply -auto-approve tfplan   

    - name: install eksctl 
      run: |
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin   

# Spin down Primary cluster      
    # - name: Install eksctl - spin down primary cluster
    #   run: |
    #     eksctl scale nodegroup --cluster primary --name management-x86-al2-mng-20231219031754451800000003 --nodes 0
    #     while [[ "$(aws eks describe-nodegroup --cluster primary --nodegroup-name management-x86-al2-mng-20231219031754451800000003 --query 'nodegroup.scalingConfig.desiredSize')" != "3" ]]; do
    #       sleep 30
    #     done

    - name: Install eksctl - Spin up nodegroup on DR Cluster
      run: |
        eksctl scale nodegroup --cluster demo --name management-x86-al2-mng-20240105212445878400000011 --nodes 3
        while [[ "$(aws eks describe-nodegroup --cluster demo --nodegroup-name management-x86-al2-mng-20240105212445878400000011 --query 'nodegroup.scalingConfig.desiredSize')" != "3" ]]; do
          sleep 30
        done

    # - name: update kubeconfig 
    #   run: |
    #     aws eks update-kubeconfig --name "dr" --region us-east-1 --role-arn arn:aws:iam::724421275000:role/DREKSRole --alias dr

# Register s3 snapshot
    - name: register hot snapshot repository
      run: |
        RETURN_CODE=$(curl -X PUT "http://${{ vars.DR_ELASTIC_ELB }}:9200/_snapshot/cyber_data_repository_hot?pretty" -H 'Content-Type: application/json' -i -k --user "elastic:${{ secrets.ELASTIC_PASSWORD }}" -d'
        { 
          "type": "s3",
          "settings": {
            "bucket": "${{ vars.SNAPSHOT_BUCKET_HOT }}",
            "region": "us-east-1"
          }
        }')
        if [ "$RETURN_CODE" -ne 200 ] && [ "$RETURN_CODE" -ne 201 ]; then
          exit 1
        fi       

# Register s3 snapshot
    - name: register partial snapshot repository
      run: |
        RETURN_CODE=$(curl -X PUT "http://${{ vars.DR_ELASTIC_ELB }}:9200/_snapshot/cyber_data_repository_partial?pretty" -H 'Content-Type: application/json' -i -k --user "elastic:${{ secrets.ELASTIC_PASSWORD }}" -d'
        { 
          "type": "s3",
          "settings": {
            "bucket": "${{ vars.SNAPSHOT_BUCKET_PARTIAL }}",
            "region": "us-east-1"
          }
        }')
        if [ "$RETURN_CODE" -ne 200 ] && [ "$RETURN_CODE" -ne 201 ]; then
          exit 1
        fi      


# Register s3 snapshot
    - name: register cold snapshot repository
      run: |
        RETURN_CODE=$(curl -X PUT "http://${{ vars.DR_ELASTIC_ELB }}:9200/_snapshot/cyber_data_repository_cold?pretty" -H 'Content-Type: application/json' -i -k --user "elastic:${{ secrets.ELASTIC_PASSWORD }}" -d'
        { 
          "type": "s3",
          "settings": {
            "bucket": "${{ vars.SNAPSHOT_BUCKET_COLD }}",
            "region": "us-east-1"
          }
        }')
        if [ "$RETURN_CODE" -ne 200 ] && [ "$RETURN_CODE" -ne 201 ]; then
          exit 1
        fi    


# Apply ILM and Index template 
    - name: Apply ILM and Index template
      run: |
        curl -X PUT "http://${{ vars.DR_ELASTIC_ELB }}:9200/_ilm/policy/${{ vars.PRIMARY_ECK_ILM }}" -H 'Content-Type: application/json' -i -k --user "elastic:${{ secrets.ELASTIC_PASSWORD }}" -d'
        {
          "policy": {
            "phases": {
              "hot": {
                "min_age": "0ms",
                "actions": {
                  "set_priority": {
                    "priority": 100
                  },
                  "rollover": {
                    "max_age": "2m",
                    "max_size": "5gb"
                  }
                }
              },
              "cold": {
                "min_age": "2m",
                "actions": {
                "searchable_snapshot" : {
                    "snapshot_repository" : "test_data_cold_repository"
                    },
                  "set_priority": {
                    "priority": 50
                  }
                }
              }
            }
          }
        }'

# Create an index template and attach the policy to the template
    - name: Create an index template and attach the policy to the template
      shell: bash
      run: |
          RETURN_CODE=$(curl -X PUT "http://${{ vars.DR_ELASTIC_ELB }}:9200/_index_template/test_data_index_template" -i -k --user "elastic:${{ secrets.ELASTIC_PASSWORD }}" -H 'Content-Type: application/json' -d'
          {
            "index_patterns": ["test_data-*"],
            "template": {
              "settings": {
                "index": {
                  "lifecycle": {
                    "name": "test_data_ilm",
                    "rollover_alias": "test_data"
                  },
                  "routing": {
                    "allocation": {
                      "include": {
                        "_tier_preference": "data_hot"
                      }
                    }
                  },
                  "number_of_shards": "1",
                  "number_of_replicas": "0"
                }
              }
            }
          }')
          if [ "$RETURN_CODE" -ne 200 ] && [ "$RETURN_CODE" -ne 201 ]; then
            exit 1
          fi          



# Restore ---

    - name: restore the snapshot in DR Cluster (hot tier)
      shell: bash 
      run: |
        SNAPSHOT_NAME=$(curl -X GET "http://${{ vars.DR_ELASTIC_ELB }}:9200/_cat/snapshots/cyber_data_repository_hot?v" --user "elastic:${{ secrets.ELASTIC_PASSWORD }}" | awk '{print $4, $5, $1}' | sort -n  | tail -n 1 | awk '{print $3}')
        RETURN_CODE=$(curl -X POST "http://${{ vars.DR_ELASTIC_ELB }}:9200/_snapshot/cyber_data_repository_hot/${SNAPSHOT_NAME}/_restore" --user "elastic:${{ secrets.ELASTIC_PASSWORD }}" -H 'Content-Type: application/json' -d'
        {
              "indices": "*"
        }
        ')
        if [ $RETURN_CODE -ne 200 ] && [ $RETURN_CODE -ne 201 ]; then       
          exit 1
        fi

    - name: restore the snapshot in DR Cluster (cold tier)
      shell: bash 
      run: |
        SNAPSHOT_NAME=$(curl -X GET "http://${{ vars.DR_ELASTIC_ELB }}:9200/_cat/snapshots/cyber_data_repository_partial?v" --user "elastic:${{ secrets.ELASTIC_PASSWORD }}" | awk '{print $4, $5, $1}' | sort -n  | tail -n 1 | awk '{print $3}')
        RETURN_CODE=$(curl -X POST "http://${{ vars.DR_ELASTIC_ELB }}:9200/_snapshot/cyber_data_repository_partial/${SNAPSHOT_NAME}/_restore?wait_for_completion=true" --user "elastic:${{ secrets.ELASTIC_PASSWORD }}" -H 'Content-Type: application/json' -d'
          {
                "indices": "*"
          }
        ')
        if [ "$RETURN_CODE" -ne 200 ] && [ "$RETURN_CODE" -ne 201 ]; then    
          exit 1
        fi

    - name: Validate Cluster and get count
      shell: bash 
      run: |
        curl -X GET "http://${{ vars.DR_ELASTIC_ELB }}:9200/test_data/_search" --user "elastic:${{ secrets.ELASTIC_PASSWORD }}" -H 'Content-Type: application/json' 

        curl -X GET "http://${{ vars.DR_ELASTIC_ELB }}:9200/test_data/_count" --user "elastic:${{ secrets.ELASTIC_PASSWORD }}" -H 'Content-Type: application/json'


# setup Snashot Lifecyle  
    # - name: setup Snashot Lifecyle  
    #   shell: bash
    #   run: |
    #       RETURN_CODE=$(curl -X PUT -w "%{http_code}" "http://${{ vars.DR_ELASTIC_ELB }}:9200/_slm/policy/daily-snapshots?pretty" -i -k --user "elastic:${{ secrets.ELASTIC_PASSWORD }}" -H 'Content-Type: application/json' -d'
    #       {
    #         "schedule": "0 0 0 * * ?",
    #         "name": "<cyberdatahot-{now/d}>",
    #         "repository": "cyber_data_repository",
    #         "config": {
    #           "indices": ["*"],
    #           "ignore_unavailable": false,
    #           "include_global_state": true 
    #         },
    #         "retention": {
    #           "expire_after": "30d",
    #           "min_count": 1,
    #           "max_count": 5
    #         }
    #       }'  | tail -1)
    #       if [ $RETURN_CODE -ne 200 ] && [ $RETURN_CODE -ne 201 ]; then 
    #         exit 1
    #       fi 
