name: DR Template Run

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: us-east-1
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

    - name: Configure other AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: arn:aws:iam::724421275000:role/DREKSRole
        role-session-name: MySessionName   

#   Terraform plan and Terraform apply of cluster creation     
    # - name: Set up Terraform
    #   uses: hashicorp/setup-terraform@v1
    #   with:
    #     terraform_version: 1.0.0
    #     #cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # - name: Terraform Init
    #   run: terraform init

    # - name: Terraform Plan
    #   run: terraform plan -out=tfplan

    # - name: Terraform Apply
    #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    #   run: terraform apply -auto-approve tfplan   

    - name: install eksctl 
      run: |
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin   

# Spin down Primary cluster      
    # - name: Install eksctl - spin down primary cluster
    #   run: |
    #     eksctl scale nodegroup --cluster primary --name management-x86-al2-mng-20231219031754451800000003 --nodes 0
    #     while [[ "$(aws eks describe-nodegroup --cluster dr --nodegroup-name management-x86-al2-mng-20231219031754451800000003 --query 'nodegroup.scalingConfig.desiredSize')" != "3" ]]; do
    #       sleep 30
    #     done

    # - name: Install eksctl - Spin up nodegroup on DR Cluster
    #   run: |
    #     eksctl scale nodegroup --cluster demo --name management-x86-al2-mng-20231122214931321600000003 --nodes 3
    #     while [[ "$(aws eks describe-nodegroup --cluster dr --nodegroup-name management-x86-al2-mng-20231122214931321600000003 --query 'nodegroup.scalingConfig.desiredSize')" != "3" ]]; do
    #       sleep 30
    #     done

    # - name: update kubeconfig 
    #   run: |
    #     aws eks update-kubeconfig --name "dr" --region us-east-1 --role-arn arn:aws:iam::724421275000:role/DREKSRole --alias dr

# Register s3 snapshot
    - name: register s3 snapshot
      run: |
        curl -X PUT "http://${{ vars.DR_ELASTIC_ELB }}:9200/_snapshot/cyber_data_repository?pretty" -H 'Content-Type: application/json' -i -k --user "elastic:${{ secrets.ELASTIC_PASSWORD }}" -d'
        { 
          "type": "s3",
          "settings": {
            "bucket": "cyber-red-blue-snaphot-repo",
            "region": "us-east-1"
          }
        }'       

# Restore ---

    - name: restore 
      shell: bash 
      run: |
        SNAPSHOT_NAME=$(curl -X GET "http://${{ vars.DR_ELASTIC_ELB }}:9200/_cat/snapshots/cyber_data_repository?v" --user "elastic:${{ secrets.ELASTIC_PASSWORD }}" | awk '{print $4, $5, $1}' | sort -n  | tail -n 1 | awk '{print $3}')
        curl -X POST "http://${{ vars.DR_ELASTIC_ELB }}:9200/_snapshot/cyber_data_repository/${SNAPSHOT_NAME}/_restore" --user "elastic:${{ secrets.ELASTIC_PASSWORD }}" -H 'Content-Type: application/json' -d'
        {
              "indices": "*"
        }
        '      

# setup Snashot Lifecyle  
    - name: setup Snashot Lifecyle  
      shell: bash
      run: |
          curl -X PUT "http://${{ vars.DR_ELASTIC_ELB }}:9200/_slm/policy/daily-snapshots?pretty" -i -k --user "elastic:${{ secrets.ELASTIC_PASSWORD }}" -H 'Content-Type: application/json' -d'
          {
            "schedule": "0 0 0 * * ?",
            "name": "<cyberdatahot-{now/d}>",
            "repository": "cyber_data_repository",
            "config": {
              "indices": ["*"],
              "ignore_unavailable": false,
              "include_global_state": true 
            },
            "retention": {
              "expire_after": "30d",
              "min_count": 1,
              "max_count": 5
            }
          }'     


# Create an index template and attach the policy to the template
    - name: Create an index template and attach the policy to the template
      shell: bash
      run: |
          curl -X PUT "http://${{ vars.DR_ELASTIC_ELB }}:9200/_index_template/testtemplate?pretty" -i -k --user "elastic:${{ secrets.ELASTIC_PASSWORD }}" -H 'Content-Type: application/json' -d'
          {
            "index_patterns": ["cyber_data*"],
            "template": {
              "settings": {
                "number_of_shards": 3,
                "number_of_replicas": 1, 
                "index.lifecycle.name": "cyber_data_ilm",
                "index.lifecycle.rollover_alias": "cyber_data"
              }
            }
          }'  



